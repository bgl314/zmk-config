/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include "../../../zmk-nodefree-config/helper.h"
#include "../../../zmk-nodefree-config/keypos_def/keypos_42keys.h"   


#define COLEMAK   0
#define REAPER 1
#define GAMES 2
#define GAMES_ALT 3
#define NUMBERS  4
#define SYMBOLS  5 
#define NAV    6
#define ADJUST 7

#define QUICK_TAP_MS 175


&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;              // repeat on tap-into-hold
    hold-trigger-key-positions = <0>;  // tap on interrupt
};
&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

ZMK_BEHAVIOR(hml, hold_tap,  // left-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap-ms = <120>;        // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;            // requires PR #1423
)

ZMK_BEHAVIOR(hmr, hold_tap,  // right-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap-ms = <150>;        // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;            // requires PR #1423
)

ZMK_BEHAVIOR(ss_cw, mod_morph,
    bindings = <&sk RSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
/*
ZMK_BEHAVIOR(scln_dt, mod_morph,
    bindings = <&kp DOT>, <&kp LT>;
    mods = <(MOD_RSFT|MOD_LSFT)>;
)
ZMK_BEHAVIOR(cln_cm, mod_morph,
    bindings = <&kp COMMA>, <&kp GT>;
    mods = <(MOD_RSFT|MOD_LSFT)>;
)
*/

// use global-quick-tap-ms for combos (requires PR 1387)
#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <75>;

#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 35
ZMK_COMBO(lgui,  &kp LGUI,      LH2 LH1,     COLEMAK, COMBO_TERM_FAST)
/* Brackets (horizontal right hand) */
ZMK_COMBO(dcbr,  &dbl_cbr,      RT0 RT1,     COLEMAK NUMBERS, COMBO_TERM_FAST)
ZMK_COMBO(dpar,  &dbl_paren,    RM0 RM1,     COLEMAK NUMBERS, COMBO_TERM_FAST)
ZMK_COMBO(dbkt,  &dbl_bkt,      RB0 RB1,     COLEMAK NUMBERS, COMBO_TERM_FAST)
//ZMK_COMBO(dlt,  &dbl_ltgt,      RM1 RM2,     COLEMAK NUMBERS, COMBO_TERM_FAST)

/* Other symbols (vertical combos) */
ZMK_COMBO(exclm, &kp EXCL,      LT4 LM4,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(at,    &kp AT,        LT3 LM3,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(hash,  &kp HASH,      LT2 LM2,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(dllr,  &kp DLLR,      LT1 LM1,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(prcnt, &kp PRCNT,     LT0 LM0,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)

ZMK_COMBO(caret, &kp CARET,     RT0 RM0,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(amps,  &kp AMPS,      RT1 RM1,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(star,  &kp STAR,      RT2 RM2,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)

ZMK_COMBO(tilde, &kp TILDE,     LM4 LB4,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(grave, &kp GRAVE,     LM3 LB3,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(under, &kp UNDER,     LM2 LB2,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(minus, &kp MINUS,     LM1 LB1,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(plus, &kp PLUS,       LM0 LB0,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)

ZMK_COMBO(pipe,  &kp PIPE,      RM0 RB0,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(equal, &kp EQUAL,     RM1 RB1,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(lt, &kp RS(SEMI),           RM2 RB2,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(gt, &kp SEMI,         RM3 RB3,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)

ZMK_COMBO(squot,  &kp SQT, RM3 RT3,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(dquot,  &kp RS(SQT), RM4 RT4,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(scln_ent,  &scln_ret, RM4 RB4,     COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(nav_ret,  &kp RET, RH0 RB4,     COLEMAK NUMBERS SYMBOLS NAV REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(nav_ret2,  &kp RET, RH0 RM4,    COLEMAK NUMBERS SYMBOLS NAV REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(bkspc_ret,  &kp RET, LH0 LM4,    COLEMAK REAPER GAMES, COMBO_TERM_SLOW)
ZMK_COMBO(rh_adj,  &mo ADJUST, RH0 RH1,    COLEMAK REAPER GAMES NAV, COMBO_TERM_FAST)
ZMK_COMBO(lh_del,  &kp DEL, LH0 LH1,    COLEMAK NAV REAPER GAMES, COMBO_TERM_FAST)
ZMK_COMBO(cw_trigger,  &caps_word, RH1 RM1,    COLEMAK REAPER GAMES, COMBO_TERM_FAST)

/ {
    behaviors {

        hhm: hold_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        TAB_NUMBERS: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo NUMBERS>, <&kp TAB>;
        };
        slash_ret: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FSLH>, <&kp RET>;
        };
        
        p_space: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp SPACE>;
        };
        s_alt_s: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_5";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp S>, <&s_alt_s_macro>;
        };
        
        t_take_t: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_6";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp T>, <&t_take_macro>;
        };
        hmtake: hold_macro_mods1 {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_macro_mods1";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&t_take_t>;
        };
        htms: hold_macro_mods2 {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_macro_mods2";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&s_alt_s>;
        };
         
        dot_ent: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp ENTER>;
        };
        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        scln_ent: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&scln_ret>;
        };
        z_ret: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Z>, <&kp RET>;
        };
    };

    macros {
        scln_ret: scln_ret {
            label = "ZM_scln_ret";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SEMI &kp RET>;
        };
        t_take_macro: t_take_macro {
            label = "ZM_t_take_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>,
                <&macro_press &kp LALT>,
                <&macro_tap &kp T>,
                <&macro_release &kp LALT>,
                <&macro_release &kp LSHFT>
                ;
        };
        s_alt_s_macro: s_alt_s_macro {
            label = "ZM_s_alt_s_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                <&macro_press &kp LALT>,
                <&macro_tap &kp S>,
                <&macro_release &kp LALT>
                ;
        };
        dbl_paren: dbl_paren {
            label = "ZM_dbl_paren_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                <&macro_tap &kp LPAR &kp RPAR &kp LEFT>
                ;
        };
        dbl_cbr: dbl_cbr {
            label = "ZM_dbl_cbr_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                <&macro_tap &kp LBRC &kp RBRC &kp LEFT>
                ;
        };
        dbl_bkt: dbl_bkt {
            label = "ZM_dbl_bkt_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                <&macro_tap &kp LBKT &kp RBKT &kp LEFT>
                
                ;
        };
        dbl_ltgt: dbl_ltgt {
            label = "ZM_dbl_ltgt_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                <&macro_tap &kp LT &kp GT &kp LEFT>
                ;
        };
    };


/*
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUMBERS SYMBOLS>;
            then-layer = <ADJUST>;
        };
    };
*/
        keymap {
                compatible = "zmk,keymap";

                colemak_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "CMAK"                                                  ;
// └───────────────────────────────────────────────────────────┘                                                 ;

   bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
    &trans &kp Q     &kp W     &kp F     &kp P     &kp G                &kp J     &kp L     &kp U     &kp Y     &kp SQT   &trans   
    &trans &hml LGUI A &hml LALT  R   &hml LCTL S  &hml LSHFT T &kp D   &kp H  &hmr RSHFT N &hmr RCTL E  &hmr RALT I  &hmr RGUI O   &trans   
    &trans &z_ret     &kp X     &kp C     &kp V     &kp B                &kp K     &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans 
                        &hhm LALT ESC   &lt NUMBERS TAB   &hhm LCTRL BKSP      &tm NAV SPC  &sk RSHFT &mo SYMBOLS
                        >;
                };
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                reaper_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "REAPR"                                                  ;
// └───────────────────────────────────────────────────────────┘

 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
&trans &trans   &trans  &trans    &p_space   &trans                         &trans     &trans     &trans     &trans     &trans &trans 
&trans &trans   &hhm LALT R  &htms LCTL 0  &hmtake LSHFT 0  &trans                         &trans    &trans     &trans     &trans     &trans &trans 
&trans &trans   &trans  &trans    &trans     &trans                         &trans     &trans     &trans &trans   &trans &trans 
                            &trans   &trans   &trans                        &trans   &trans &trans    
                        >;
                };
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

                games_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "GAMES"                                                  ;
// └───────────────────────────────────────────────────────────┘

 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
&trans &trans   &trans   &trans    &trans    &trans                    &trans     &trans     &trans     &trans     &trans &trans 
&trans &kp A   &kp R    &kp S       &kp T    &kp D                      &trans    &trans     &trans     &trans     &trans &trans 
&trans &kp Z   &trans  &trans     &trans     &trans                     &trans     &trans     &trans &trans   &trans &trans 
                            &kp TAB   &mo GAMES_ALT   &kp SPACE                 &trans   &trans &trans    
                        >;
                };
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                games_alt_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "GM_ALT"                                                  ;
// └───────────────────────────────────────────────────────────┘

 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
&trans &kp F9      &kp F10   &kp F11   &kp F12     &trans                     &trans     &trans     &trans     &trans     &trans &trans 
&trans &kp F5      &kp F6   &kp F7   &kp F8     &kp BKSP                        &trans    &trans     &trans     &trans     &trans &trans 
&trans &kp F1    &kp F2   &kp F3   &kp F4     &kp ESC                     &trans     &trans     &trans &trans   &trans &trans 
                            &trans   &trans   &trans                 &trans   &trans &trans    
                        >;
                };
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                number_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "12345"                                                 ;
// └───────────────────────────────────────────────────────────┘
 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
 &trans   &kp KP_DIVIDE &kp N7 &kp N8 &kp N9  &kp KP_MINUS       &kp KP_MINUS  &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DIVIDE &trans 
 &trans   &kp KP_MULTIPLY    &kp N4 &kp N5 &kp N6 &kp KP_PLUS    &kp KP_PLUS  &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_MULTIPLY &trans 
 &trans   &dot_ent   &kp N1 &kp N2 &kp N3 &kp SPACE            &kp KP_EQUAL  &kp KP_N1 &kp KP_N2 &kp KP_N3 &dot_ent &trans 
                                  &kp KP_N0  &trans &kp DEL          &kp KP_N0 &trans &trans  
                        >;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                symbol_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "!@#$%"                                                 ;
// └───────────────────────────────────────────────────────────┘
 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
 &trans     &kp EXCL   &kp AT   &kp HASH  &kp DLLR  &kp PRCNT                      &kp CARET &kp AMPS  &kp STAR  &kp LPAR    &kp RPAR      &trans 
 &trans    &kp GRAVE   &hml LALT LBKT &hml LSHFT LBRC &hml LCTL LPRN  &kp LT  &kp GT &hmr RSHFT RPRN  &hmr RCTL RBRC  &hmr RALT RBKT   &kp BSLH  &trans 
 &trans    &kp TILDE  &kp PIPE &kp UNDER  &kp MINUS  &kp PLUS                  &trans  &kp EQUAL &kp RS(SEMI)  &scln_ent  &kp FSLH    &trans 
                                   &trans   &trans   &trans                         &trans    &trans    &trans  
                        >;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

                nav_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "NAV"                                                 ;
// └───────────────────────────────────────────────────────────┘
 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
   &trans  &kp PG_UP    &kp HOME    &kp UP    &kp END    &trans                         &kp KP_NUM    &kp PSCRN    &kp INSERT &trans    &trans     &trans 
   &trans  &kp PG_DN    &kp LEFT &kp DOWN  &kp RIGHT    &kp DEL                         &caps_word    &kp RSHFT  &kp RCTL    &kp RALT    &kp ESC   &trans 
   &trans     &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)   &trans                     &kp CAPS    &trans    &trans    &trans    &kp RET    &trans 
                                  &kp ESC &kp TAB   &trans                           &trans    &trans    &trans  
                        >;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                adjust_layer {
// ┌───────────────────────────────────────────────────────────┐
label= "ADJUST"                                                ;
// └───────────────────────────────────────────────────────────┘
 bindings = <
 //╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷╷         ╷         ╷         ╷         ╷         ╷         ╷         ╷
&trans &kp F9      &kp F10   &kp F11   &kp F12     &trans                   &ext_power EP_TOG    &bt BT_CLR &bt BT_NXT &tog GAMES  &tog REAPER &trans 
&trans &kp F5      &kp F6   &kp F7   &kp F8     &trans                      &trans    &hmr RSHFT C_PLAY &hmr RCTL C_STOP &hmr RALT C_PREV  &hmr RGUI C_NEXT  &trans  
&trans &kp F1    &kp F2   &kp F3   &kp F4     &trans                        &trans    &kp C_VOL_DN &kp C_VOL_UP   &kp C_MUTE &trans    &trans 
                                         &trans    &trans    &trans                &trans    &trans    &trans    
                        >;
                };
        };
};